import {
  {{pascalCase name}}Action
} from '../server-actions/{{name}}-action';

import {
  {{pascalCase name}}Service
} from '../services/{{name}}-service';

jest.mock('../services/{{name}}-service');

describe('{{pascalCase name}}Action', () => {
  beforeEach(() => {
    jest.clearAllMocks();
  });

  describe('create{{pascalCase name}}', () => {
    it('deve criar {{name}} com sucesso', async () => {
      const mock{{pascalCase name}} = {
        id: '1',
        name: 'Test {{pascalCase name}}',
        createdAt: new Date(),
        updatedAt: new Date(),
      };

      ({{pascalCase name}}Service.create as jest.Mock).mockResolvedValue(mock{{pascalCase name}});

      const result = await {{pascalCase name}}Action.create{{pascalCase name}}({
        name: 'Test {{pascalCase name}}',
      });

      expect(result).toEqual({
        ok: true,
        status: 200,
        message: expect.any(String),
        data: mock{{pascalCase name}},
      });
    });
  });

  describe('get{{pascalCase name}}ById', () => {
    it('deve retornar {{name}} por ID', async () => {
      const mock{{pascalCase name}} = {
        id: '1',
        name: 'Test {{pascalCase name}}',
        createdAt: new Date(),
        updatedAt: new Date(),
      };

      ({{pascalCase name}}Service.getById as jest.Mock).mockResolvedValue(mock{{pascalCase name}});

      const result = await {{pascalCase name}}Action.get{{pascalCase name}}ById('1');

      expect(result).toEqual({
        ok: true,
        status: 200,
        message: expect.any(String),
        data: mock{{pascalCase name}},
      });
    });
  });
});
